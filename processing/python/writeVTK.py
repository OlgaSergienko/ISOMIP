#!/usr/bin/env /home/gmm/Enthought/Canopy_64bit/User/bin/python2.7

import netCDF4
import numpy as np
import matplotlib.pyplot as plt
import datetime
from matplotlib.dates import YearLocator, MonthLocator, DateFormatter, date2num
import netCDF4
#from misc_gis import *
from VTKgen import *
import scipy.io as sio
import os,sys

#reg=sys.argv[1]
#print 'Processing region:',reg + '...'

#exp=sys.argv[2]
#print 'Processing experiment:',exp + '...'

# ocean grid
D=netCDF4.Dataset('ocean_geometry.nc').variables['D'][:]
lonh=netCDF4.Dataset('ocean_geometry.nc').variables['lonh'][:]
lonq=netCDF4.Dataset('ocean_geometry.nc').variables['lonq'][:]
lath=netCDF4.Dataset('ocean_geometry.nc').variables['lath'][:]
latq=netCDF4.Dataset('ocean_geometry.nc').variables['latq'][:]
lonqs, latqs = np.meshgrid(lonq,latq)
lons, lats = np.meshgrid(lonh,lath)
D=np.ma.masked_where(D <= 1, D)
D.mask = np.ma.array(D); D.mask[:,:]=False

# ice shelf thickness
IS = netCDF4.Dataset('Ocean1_2D.nc').variables['thick'][:]
#IS = np.ma.masked_where(IS==0,IS)
# ice shelf base
ssh = netCDF4.Dataset('ISOMIP_IC.nc').variables['ave_ssh'][0,:,:]
#ssh = np.ma.masked_where(IS==0,ssh)

n1,n2=np.nonzero(IS!=0.0)

# load time
time=netCDF4.Dataset('prog__0001_002.nc').variables['Time'][:]
tm=len(time)
# interface and layer thickness
e=netCDF4.Dataset('prog__0001_002.nc').variables['e'][0,:,:,:]
h=netCDF4.Dataset('prog__0001_002.nc').variables['h'][0,:,:,:]

# correct top and bottom, for vis pourposes
h[0,:,:]=e[0,:,:]; h[-1,:,:]=e[-1,:,:]

NZ,NY,NX=h.shape
# create VTK bathymetry
VTKgen(lats,lons,D.mask,depth=D,h=h,fname=reg)

# create VTK ice-shelf
VTKgen(lats,lons,D.mask,h=h,shelf_base=ssh,shelf_thick=IS,fname=reg)

time_list=[] # list for time 
#tm=2 # number of nc files
ind=0

# loop through time and plot surface fields
for t in range(tm):
        print 'Time is:',time[t]
        # save data in the lists
        #time_list.append(date)
        # check if data has been saved
        path_to_file = str('VTK/%s-%05d.vtk' % (reg,ind))
        if os.path.isfile(path_to_file):
           print ' \n' + '==> ' + 'FILE EXISTS, MOVING TO THE NEXT ONE ...\n' + ''
           ind=ind+1
        else: 
           # ocean
           # structure
           # layer thickness
           e=netCDF4.Dataset('prog__0001_002.nc').variables['e'][t,:,:,:]
           h_dum=np.abs(np.diff(e,axis=0))
           h=0.5*(e[0:-1,:,:]+e[1::,:,:])
           # correct top and bottom, for vis pourposes
           h[0,:,:]=e[0,:,:]; h[-1,:,:]=e[-1,:,:]
           #h=netCDF4.Dataset('prog__0001_002.nc').variables['h'][t,:,:,:]
           # correct top and bottom, for vis pourposes
           h[0,:,:]=e[0,:,:]; h[-1,:,:]=e[-1,:,:]
           temp=netCDF4.Dataset('prog__0001_002.nc').variables['temp'][t,:,:,:]
           salt=netCDF4.Dataset('prog__0001_002.nc').variables['salt'][t,:,:,:]
           # for isopycnal models
           # temp, mark values where h_dum<10 cm with Nan
           temp[h_dum<0.01]=np.nan; salt[h_dum<0.01]=np.nan
           # same for salt, u and v
           v=netCDF4.Dataset('prog__0001_002.nc').variables['v'][t,:,:,:]
           u=netCDF4.Dataset('prog__0001_002.nc').variables['u'][t,:,:,:]
	   u=np.ma.masked_where(u>100,u)
           u[h_dum<0.01]=np.nan
	   v[h_dum<0.01]=np.nan
           v.fill_value=0.0
	   u.fill_value=0.0
           v=v.filled()
	   u=u.filled()

           # write just bottom values
           #VTKgen(lats,lons,D.mask,depth=D,h=h,temp=tt,salt=ss,rho=gamma,u=uu,v=vv,writebottom=True,fname=reg,t=ind)

           VTKgen(lats,lons,D.mask,h=h,temp=temp,salt=salt,u=u,v=v,fname=reg,t=ind)
           ind=ind+1

print ' \n' + '==> ' + ' Done saving vtk files!\n' + ''

# the following is for displaying the time in the PNG figures generated by Visit
sio.savemat('VTK/time.mat', {'time':time})

print ' \n' + '==> ' + '  DONE!\n' + ''

